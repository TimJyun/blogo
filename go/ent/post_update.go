// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blogo/ent/post"
	"blogo/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTitle(s *string) *PostUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetContent sets the "content" field.
func (pu *PostUpdate) SetContent(s string) *PostUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pu *PostUpdate) SetNillableContent(s *string) *PostUpdate {
	if s != nil {
		pu.SetContent(*s)
	}
	return pu
}

// SetVersion sets the "version" field.
func (pu *PostUpdate) SetVersion(u uint32) *PostUpdate {
	pu.mutation.ResetVersion()
	pu.mutation.SetVersion(u)
	return pu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pu *PostUpdate) SetNillableVersion(u *uint32) *PostUpdate {
	if u != nil {
		pu.SetVersion(*u)
	}
	return pu
}

// AddVersion adds u to the "version" field.
func (pu *PostUpdate) AddVersion(u int32) *PostUpdate {
	pu.mutation.AddVersion(u)
	return pu
}

// SetCreateTime sets the "createTime" field.
func (pu *PostUpdate) SetCreateTime(t time.Time) *PostUpdate {
	pu.mutation.SetCreateTime(t)
	return pu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCreateTime(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetCreateTime(*t)
	}
	return pu
}

// SetLastUpdate sets the "lastUpdate" field.
func (pu *PostUpdate) SetLastUpdate(t time.Time) *PostUpdate {
	pu.mutation.SetLastUpdate(t)
	return pu
}

// SetNillableLastUpdate sets the "lastUpdate" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLastUpdate(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetLastUpdate(*t)
	}
	return pu
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.Version(); ok {
		_spec.SetField(post.FieldVersion, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.AddedVersion(); ok {
		_spec.AddField(post.FieldVersion, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.CreateTime(); ok {
		_spec.SetField(post.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.LastUpdate(); ok {
		_spec.SetField(post.FieldLastUpdate, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTitle(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetContent sets the "content" field.
func (puo *PostUpdateOne) SetContent(s string) *PostUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableContent(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetContent(*s)
	}
	return puo
}

// SetVersion sets the "version" field.
func (puo *PostUpdateOne) SetVersion(u uint32) *PostUpdateOne {
	puo.mutation.ResetVersion()
	puo.mutation.SetVersion(u)
	return puo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableVersion(u *uint32) *PostUpdateOne {
	if u != nil {
		puo.SetVersion(*u)
	}
	return puo
}

// AddVersion adds u to the "version" field.
func (puo *PostUpdateOne) AddVersion(u int32) *PostUpdateOne {
	puo.mutation.AddVersion(u)
	return puo
}

// SetCreateTime sets the "createTime" field.
func (puo *PostUpdateOne) SetCreateTime(t time.Time) *PostUpdateOne {
	puo.mutation.SetCreateTime(t)
	return puo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCreateTime(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetCreateTime(*t)
	}
	return puo
}

// SetLastUpdate sets the "lastUpdate" field.
func (puo *PostUpdateOne) SetLastUpdate(t time.Time) *PostUpdateOne {
	puo.mutation.SetLastUpdate(t)
	return puo
}

// SetNillableLastUpdate sets the "lastUpdate" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLastUpdate(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetLastUpdate(*t)
	}
	return puo
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.Version(); ok {
		_spec.SetField(post.FieldVersion, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.AddedVersion(); ok {
		_spec.AddField(post.FieldVersion, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.CreateTime(); ok {
		_spec.SetField(post.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.LastUpdate(); ok {
		_spec.SetField(post.FieldLastUpdate, field.TypeTime, value)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
